name: Release Workflow

on:
  push:
    branches:
      - main

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'

    - name: Cache node modules
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      run: npm install

    - name: Install type definitions
      run: npm install --save-dev @types/node @types/fs-extra

    - name: Compile TypeScript
      run: npx tsc

    - name: Lint with eslint
      run: npm run lint

    - name: Run tests
      run: npm run test

  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      newtag: ${{ steps.gettag.outputs.newtag }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Get latest tag
      id: getlatesttag
      run: |
          git fetch --prune --unshallow
          echo "$(git tag --sort=creatordate | tail -n 1)" > CUR_TAG
          echo ::set-output name=cur_tag::$(cat CUR_TAG)

    - name: Set release tag
      id: set_release_tag
      run: |
        echo "Current Tag: ${{ steps.cur_tag_var.outputs.cur_tag }}"

        if [[ "${{ steps.cur_tag_var.outputs.cur_tag }}" =~ ^[0-9].+$ ]]; then
          echo 'Incrementing patch version'
          CUR_VERSION=${{ steps.cur_tag_var.outputs.cur_tag }}
          VERSION=( ${CUR_VERSION//./ } )
          
          # Incrementing the patch version
          ((VERSION[-1]+=1))
          
          NEW_VERSION=$(IFS="."; echo "${VERSION[*]}")
          echo "New Version: $NEW_VERSION"
          echo $NEW_VERSION > TAG_NAME
        else
          echo 'Current tag format is not valid for incrementing.'
          exit 1
        fi
        echo ::set-output name=tag_name::$(cat TAG_NAME)

    - name: Push the new tag
      id: set_git_tag
      run: |
        echo "${{ steps.set_release_tag.outputs.tag_name }}" > TARGET_TAG_NAME
        cat TARGET_TAG_NAME
        git tag $(cat TARGET_TAG_NAME)
        git push origin $(cat TARGET_TAG_NAME)
        echo ::set-output name=target_tag_name::$(cat TARGET_TAG_NAME)

  build-and-release:
    needs: prepare-release
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Build with pkg
      run: |
        npm i
        npx tsc
        npm install -g pkg
        pkg . --output ./my-binary

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: ./my-binary,source-code.zip
        tag_name: ${{ needs.prepare-release.outputs.newtag }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Zip source code
      run: zip -r source-code.zip .

    - name: Create GitHub Release and Upload binaries/source
      uses: softprops/action-gh-release@v1
      with:
        files: ./my-binary,source-code.zip
        tag_name: ${{ needs.prepare-release.outputs.newtag }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
