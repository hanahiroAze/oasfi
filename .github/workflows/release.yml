name: Release Workflow

on:
  push:
    branches:
      - main
    tags:
      - "v0.2.x"

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'

    - name: Cache node modules
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      run: npm install

    - name: Install type definitions
      run: npm install --save-dev @types/node @types/fs-extra

    - name: Compile TypeScript
      run: npx tsc

    - name: Lint with eslint
      run: npm run lint

    - name: Run tests
      run: npm run test

  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.set_git_tag.outputs.target_tag_name }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Get latest tag
      id: getlatesttag
      run: |
          git fetch --prune --unshallow
          echo "$(git tag --sort=creatordate | tail -n 1)" > CUR_TAG
          echo "cur_tag=$(cat CUR_TAG)" >> $GITHUB_ENV
          echo "pushed_tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

    - name: Set release tag
      id: set_release_tag
      run: |
        echo "Current Tag: ${{ env.cur_tag }}"
        echo "Pushed Tag: ${{ env.pushed_tag }}"

        MAJOR_MINOR_VERSION="${{ env.pushed_tag%.* }}"
        CURRENT_MAJOR_MINOR="${{ env.cur_tag%.* }}"

        if [[ "${MAJOR_MINOR_VERSION}" != "${CURRENT_MAJOR_MINOR}" ]]; then
            # Start new minor or major version
            NEW_VERSION="${MAJOR_MINOR_VERSION}.0"
        elif [[ "${{ env.cur_tag }}" =~ ^v[0-9].+$ ]]; then
            # Incrementing patch version
            CUR_VERSION=${{ env.cur_tag }}
            VERSION=( ${CUR_VERSION//./ } )
            
            ((VERSION[-1]+=1))
            
            NEW_VERSION=$(IFS="."; echo "${VERSION[*]}")
        else
            echo 'Current tag format is not valid.'
            exit 1
        fi

        echo "New Version: $NEW_VERSION"
        echo "tag_name=$NEW_VERSION" >> $GITHUB_ENV
        echo "::set-output name=target_tag_name::${{ env.tag_name }}"

    - name: Push the new tag
      id: set_git_tag
      run: |
        echo "${{ env.tag_name }}" > TARGET_TAG_NAME
        cat TARGET_TAG_NAME
        git tag $(cat TARGET_TAG_NAME)
        git push origin $(cat TARGET_TAG_NAME)
        echo "target_tag_name=${{ env.tag_name }}" >> $GITHUB_ENV
        echo "::set-output name=target_tag_name::${{ env.tag_name }}"

    - name: Create release
      id: create_release
      uses: actions/create-release@v1.1.4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.target_tag_name }}
        release_name: Release ${{ env.target_tag_name }}
        draft: true
        prerelease: false

  build-and-release:
    needs: prepare-release
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Build with pkg
      run: |
        npm i
        npx tsc
        npm install -g pkg
        pkg . -t node18-linux-x64 --output ./oasys-csv-cli-linux
        pkg . -t node18-macos-x64 --output ./oasys-csv-cli-macos
        pkg . -t node18-win-x64 --output ./oasys-csv-cli-win.exe

    - name: Create GitHub Release and Upload binaries/source
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.prepare-release.outputs.new_tag }}
        files: |
          ./oasys-csv-cli-linux,
          ./oasys-csv-cli-macos,
          ./oasys-csv-cli-win.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
