name: Release Workflow

on:
  push:
    branches:
      - main

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'

    - name: Cache node modules
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      run: npm install

    - name: Install type definitions
      run: npm install --save-dev @types/node @types/fs-extra

    - name: Compile TypeScript
      run: npx tsc

    - name: Lint with eslint
      run: npm run lint

    - name: Run tests
      run: npm run test

  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      newtag: ${{ steps.gettag.outputs.newtag }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Get latest tag
      id: getlatesttag
      run: |
        LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null)
        echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

    - name: Calculate new tag and set it
      id: gettag
      run: |
        if [[ -z "${LATEST_TAG}" ]]; then
          # If no previous tag, start with v0.1.0
          NEW_TAG="v0.1.0"
        else
          # If previous tag exists, bump the patch version
          MAJOR_MINOR=$(echo $LATEST_TAG | awk -F. '{print $1 "." $2}')
          PATCH=$(echo $LATEST_TAG | awk -F. '{print $3}' | sed 's/^0*//')
          NEW_TAG="${MAJOR_MINOR}.$((PATCH + 1))"
        fi
        echo "NEW_TAG=${NEW_TAG}" >> $GITHUB_ENV
        echo "::set-output name=newtag::${NEW_TAG}"

    - name: Push the new tag
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git tag $NEW_TAG
        git push origin $NEW_TAG

  build-and-release:
    needs: prepare-release
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Build with pkg
      run: |
        npm i
        npx tsc
        npm install -g pkg
        pkg . --output ./my-binary

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: ./my-binary,source-code.zip
        tag_name: ${{ needs.prepare-release.outputs.newtag }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Zip source code
      run: zip -r source-code.zip .

    - name: Create GitHub Release and Upload binaries/source
      uses: softprops/action-gh-release@v1
      with:
        files: ./my-binary,source-code.zip
        tag_name: ${{ needs.prepare-release.outputs.newtag }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
